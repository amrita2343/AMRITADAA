INSERTION SORT

#include <stdio.h>

void insertionSort(int a[], int n) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = a[i];
        j = i - 1;
        while (j >= 0 && a[j] > key) {
            a[j + 1] = a[j];
            j = j - 1;
        }
        a[j + 1] = key;
    }
}
void printArray(int a[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main() {
    int a[100], n, i;
    scanf("%d", &n);
    printf("Size of array: %d\n", n);
    
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Original array:\n");
    printArray(a, n);
    
    insertionSort(a, n);
    
    printf("Sorted array:\n");
    printArray(a, n);
    
    return 0;
}


MERGE SORT


#include <stdio.h>

void merge(int a[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];
    
    for (int i = 0; i < n1; i++)
        L[i] = a[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = a[mid + 1 + j];
    
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            a[k] = L[i];
            i++;
        } else {
            a[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1) {
        a[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2) {
        a[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int a[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        
        mergeSort(a, left, mid);
        mergeSort(a, mid + 1, right);
        
        merge(a, left, mid, right);
    }
}

void printArray(int a[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main() {
    int a[100], n, i;
    scanf("%d", &n);
    printf("Size of array: %d\n", n);
    
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Original array:\n");
    printArray(a, n);
    
    mergeSort(a, 0, n - 1);
    
    printf("Sorted array:\n");
    printArray(a, n);
    
    return 0;
}

QUICK SORT
#include <stdio.h>

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int a[], int low, int high) {
    int pivot = a[high];
    int i = (low - 1);

    for (int j = low; j < high; j++) {
        if (a[j] < pivot) {
            i++;
            swap(&a[i], &a[j]);
        }
    }
    swap(&a[i + 1], &a[high]);
    return (i + 1);
}

void quickSort(int a[], int low, int high) {
    if (low < high) {
        int pi = partition(a, low, high);

        quickSort(a, low, pi - 1);
        quickSort(a, pi + 1, high);
    }
}

void printArray(int a[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main() {
    int a[100], n, i;
    scanf("%d", &n);
    printf("Size of array: %d\n", n);
    
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Original array:\n");
    printArray(a, n);
    
    quickSort(a, 0, n - 1);
    
    printf("Sorted array:\n");
    printArray(a, n);
    
    return 0;
}


HEAP SORT 

#include <stdio.h>

void heapify(int a[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && a[left] > a[largest])
        largest = left;

    if (right < n && a[right] > a[largest])
        largest = right;

    if (largest != i) {
        int temp = a[i];
        a[i] = a[largest];
        a[largest] = temp;
        heapify(a, n, largest);
    }
}

void heapSort(int a[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(a, n, i);

    for (int i = n - 1; i >= 0; i--) {
        int temp = a[0];
        a[0] = a[i];
        a[i] = temp;
        heapify(a, i, 0);
    }
}

void printArray(int a[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main() {
    int a[100], n, i;
    scanf("%d", &n);
    printf("Size of array: %d\n", n);
    
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Original array:\n");
    printArray(a, n);
    
    heapSort(a, n);
    
    printf("Sorted array:\n");
    printArray(a, n);
    
    return 0;
}


SELECTION SORT

#include <stdio.h>

void selectionSort(int a[], int n) {
    int i, j, min_idx;
    
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (a[j] < a[min_idx]) {
                min_idx = j;
            }
        }
        
        int temp = a[min_idx];
        a[min_idx] = a[i];
        a[i] = temp;
    }
}

void printArray(int a[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main() {
    int a[100], n, i;
    scanf("%d", &n);
    printf("Size of array: %d\n", n);
    
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Original array:\n");
    printArray(a, n);
    
    selectionSort(a, n);
    
    printf("Sorted array:\n");
    printArray(a, n);
    
    return 0;
}



RADIX SORT

#include <stdio.h>

int getMax(int a[], int n) {
    int max = a[0];
    for (int i = 1; i < n; i++) {
        if (a[i] > max)
            max = a[i];
    }
    return max;
}

void countSort(int a[], int n, int exp) {
    int output[n];
    int count[10] = {0};

    for (int i = 0; i < n; i++)
        count[(a[i] / exp) % 10]++;

    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    for (int i = n - 1; i >= 0; i--) {
        output[count[(a[i] / exp) % 10] - 1] = a[i];
        count[(a[i] / exp) % 10]--;
    }

    for (int i = 0; i < n; i++)
        a[i] = output[i];
}

void radixSort(int a[], int n) {
    int max = getMax(a, n);

    for (int exp = 1; max / exp > 0; exp *= 10)
        countSort(a, n, exp);
}

void printArray(int a[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main() {
    int a[100], n, i;
    scanf("%d", &n);
    printf("Size of array: %d\n", n);
    
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Original array:\n");
    printArray(a, n);
    
    radixSort(a, n);
    
    printf("Sorted array:\n");
    printArray(a, n);
    
    return 0;
}
